---
layout: post
title:  "An Introduction to Unity 2D (Part 1)"
date:   2015-06-08 21:00:00
categories: unity
comments: true
---

I wrote a blog post on Medium a while ago ([here](https://medium.com/@SaintDako/a-very-brief-introduction-to-unity-2d-e2b0d6ba7aec)), doing a brief introduction to Unity 2D. I was planning on doing multiple parts to that tutorial, but I never went through with it. Let's try again!

This tutorial will consist of making a character move around while not falling into oblivion by adding a platform. We'll also make the character jump, and change the direction it's facing when we actually make it turn around.
<!-- more -->

Unity 5 came out recently, so we'll be using that. It looks pretty cool. Go install that first.

After installing it, open up a new project. Pick a name and a directory, put make sure to click "2D".

![New Project](http://i.imgur.com/3ZcEBxz.png "Creating a 2D project in Unity")

My Unity looks like this:

![My Unity Layout](http://i.imgur.com/Iruz3GX.png "My Unity layout")

Download the [Unity 2D sample pack](https://www.assetstore.unity3d.com/en/#!/content/18684), as we'll be using some of its assets. To do this, visit the link and click "Open in Unity". Then click "Import", and a list of files and folders will popup with checkboxes. Deselect the "Example Games" folder.

![Importing 2D Assets](http://i.imgur.com/kqFsD5n.png "Importing 2D assets")

In the **Projects** tab, you'll notice that two folders were created: *Fonts* and *Sprites*. Create some extra folders: *Animations*, *Audio*, *Materials*, *Physics Materials*, *Prefabs*, *Scenes*, and *Scripts*.

## Creating a simple foreground

Underneath the **Hierarchy** tab, click Create (or right click in empty space) and select "Create Empty". The object should be selected (highlighted); click it if it is not. Underneath the **Inspector** tab, rename the object to "Foregrounds". 

Right click on the object (in the Hierarchy) and select "Create Empty". Rename this new object to "Platform1". In the Inspector, click the "Add Component" button and select Rendering > Sprite Renderer. Drag Assets > Sprites > GrassSprite to the Sprite field. Something will appear in the Scene view!

![Attaching Sprite](http://i.imgur.com/e5dT324.png "Attaching a sprite to the platform object; drag sprite into the red box")

Drag the Platform1 object from the Hierarchy to the *Prefabs* folder in the Projects tab. Select the Platform1 object in the Hierarchy again. Notice that, at the top of the Inspector, there are three buttons beside the label "Prefab": Select, Revert and Apply. By putting our Platform1 object in the Prefabs folder, it is easy to create duplicates, which we'll do later. When changes are made to a Prefab, the Apply button should be pressed to apply the changes to all duplicates.

![Inspector Buttons](http://i.imgur.com/TF1LS3x.png "Inspector buttons, on the right")

While selecting the Platform1 object in the Hierarchy, underneath the object’s Sprite Renderer component, change the Sorting Layer dropdown option to "Foreground". Notice that there is also a Layer dropdown. Click the Layer dropdown and select "Add Layer...". Call this layer "Ground" and make Platform use it.

![Layers](http://i.imgur.com/FrESbYX.png "Layers; the sorting layer dropdown is active, while the layer dropdown is in the red box")

You may be asking, what is a *Layer* and what is a *Sorting Layer*?

- A Layer is used by cameras and lights for rendering and illumination of only parts of a scene (as described in [the documentation](http://docs.unity3d.com/Manual/Layers.html)). 
- A Sorting Layer tells Unity what order to draw the Sprites in. To see the order, click the "Layers" dropdown above the inspector and look at the "Sorting Layers" section. The first layer will be drawn first, and the last layer will be drawn last. To change this, click "Edit Layers". (This doesn't need to be done right now.)

Select the Foregrounds object in the Hierarchy. Click the Apply button to change our Prefab. Now, our Prefab should have a Sorting Layer, a Layer and a Sprite.

## Adding a character

In the hierarchy, create another Empty object (but not as a child of any of the other objects). Name this object "Character". Add the following components:

- Physics2D > RigidBody2D
- Rendering > Sprite Renderer
- Physics2D > Box Collider 2D.

(From now on, when I say to add a component, I mean to do that in the Inspector, unless otherwise stated). Underneath the RigidBody2D component, change whatever you like. For details about all of the options, check out the [RigidBody2D documentation](http://docs.unity3d.com/ScriptReference/Rigidbody2D.html). BUT, change the Interpolate dropdown option to "Interpolate".

The Box Collider 2D component allows us to change the hitbox of the object, as well as the physics material. 

The *physics material* is a kind of object that describes the coefficient of friction as well as the coefficient of restitution (bounciness) of the object in question.

The *is Trigger* checkbox tells the Unity engine, when checked, that this object is only meant for activating events and not for interacting (e.g. colliding) with other objects. For example, when a player falls off of the map, they should pass an invisible boundary that respawns them. If the option is selected, the Box Collider will be ignored by the physics engine.

For the Sprite Renderer, choose Assets > Sprites > BirdEnemyIdleSprite. Change the Layer dropdown option and the Sorting Layer dropdown option to "Player".

![Character components](http://i.imgur.com/1yfHUbl.png "Showing the different components of the character")

To start playing our "game", hit the Play button, or Ctrl+P. Our character will fall into oblivion.

## Making our character collide with the ground

Our game is not very exciting -- all that happens is our character falls forever. We need to make it fall onto the ground. To do this, we can add a BoxCollider2D to the platform, just like how we added one to our character. However, a more efficient approach is to add an EdgeCollider2D to the platform.

The difference between using a BoxCollider2D versus an EdgeCollider2D is that, with the BoxCollider2D, the game must check for more cases in which objects could have hit it (i.e. it could have been collided with on the top, left, right or bottom side). The EdgeCollider2D, with only one vertex (line), takes a smaller number of calculations to determine collisions. If the EdgeCollider2D has more vertices, then it will (probably) be worse in terms of performance.

So, add the component Physics2D > Edge Collider 2D to the Platform (in the Hierarchy). Change its y-position such that it is right at the top of the platform (if you haven’t moved anything at all, this is about y = -1).

![PlatformCollider](http://i.imgur.com/GxW4Yc5.png "Showing the components of the Platform")

Make sure to click the Apply button, so our Prefab should also have an Edge Collider 2D. Now, let's make a second platform. This is easy since we made our platform a Prefab. Drag the Platform Prefab into the Foregrounds object to create a second child. There's no difference on the screen because because the x-position of our new platform needs to be changed -- it's overlapping with the original platform. Change the x-position to -10.

If you click the Apply button, it will change the position of the Prefab, but not the position of other Platforms - the transform properties do not change. However, changing the Layer of one individual Hierarchy object and applying the changes will change every other object.

![PlatformCollider2](http://i.imgur.com/vsBoh85.png "Showing that the components of the second platform are identical") 

Hit play. The bird should fall onto the top of the platform! You may notice that the bird seems to "float" above the platform; change its Box Collider dimensions to fix this.

## Moving the Character

Time to get into the programming side of things (finally!). Select the Character object in the Hierarchy, and add the component New Script. Call it whatever you wish; I named it "BirdControl". I’m going to be programming in C#, and I may put JavaScript and Boo versions on GitHub in the future. Open up the script in whatever editor you prefer.

The two built-in functions are `Start` and `Update`. Change `Start` to `Awake`. What’s the difference? `Awake` is called first and should be used for defining references between scripts and initalization of things. `Start` is called second immediately before the first update. Check out [this video](http://unity3d.com/learn/tutorials/modules/beginner/scripting/awake-and-start) for more detail.

We’ll leave `Update()` empty. Add a third function called `FixedUpdate`. `Update` is called every frame, should be used for e.g. moving non-physics objects, simple timers and receiving input, and its update intervals may vary. `FixedUpdate` is called consistently (every physics time-step), so any physics object (e.g. RigidBody) should be updated here. [See this video for more detail](http://unity3d.com/learn/tutorials/modules/beginner/scripting/update-and-fixedupdate).

So our code should look like this right now:

{% highlight csharp %}
using UnityEngine;
using System.Collections;

public class BirdControl : MonoBehaviour {

    // Use this for initialization
    void Awake () {
    
    }
    
    // Update is called once per frame
    void Update () {
    
    }

    void FixedUpdate() {

    }
}
{% endhighlight %}

Not very interesting. Let's define some variables:

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {

    [HideInInspector]
    public Rigidbody2D player;

    bool facingRight = false;
    float h = 0f;
    public float speed = 5.0f;

    // functions go here...
}

{% endhighlight %}

`player` is the character itself. `facingRight` is what it sounds like — it’s a boolean that represents whether or not our character is facing right. `h` is a variable we'll use later to determine user input. `speed` is the moving speed of the character.

The `public` keyword allows other scripts to see the variable, and we may want other scripts to see the player object. `[HideInInspector]` prevents the variable from being shown in the Editor. If you save the script and look at the Character object, you will see a speed variable that can be edited there. This is for easily tweaking the player’s configuration while Play mode is active.

![Speed Variable](http://i.imgur.com/SKUhnbl.png "The speed variable is inside the inspector and can easily be altered")

We want to define the player object when the script starts up (when it awakes); we can do that by calling the `GetComponent` function with the Rigidbody2D type. Let's put this in the `Awake` function:

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {
    // variables go here...

    void Awake () {
        player = GetComponent<Rigidbody2D>();
    }

    // other functions...
}
{% endhighlight %}

Now what we’ll do is get the user’s input from the arrow keys. Unity automatically maps some keys for us. The left and right arrow keys are mapped to the "Horizontal" axis. We’ll start off simple and just grab which direction we’re going (1 is right, -1 is left). Since we're getting user input, let's put this in `Update()`:

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {
    // variables go here...
    // other functions go here...

    void Update() {
        h = Input.GetAxisRaw("Horizontal");
}
{% endhighlight %}

There is a similar function called `Input.GetAxis`, which returns a number that returns a number in the range of -1 to 1. It is dependent on the sensitivity of the input (e.g. how hard you are pushing on a joystick).

Now, let’s update the velocity so we can actually start moving!

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {
    // variables go here...
    // other functions go here...
    void Update () {
        h = Input.GetAxisRaw("Horizontal");
    }

    void FixedUpdate() {
        if (h > 0) {
            player.velocity = new Vector2(speed, player.velocity.y);
        } else if (h < 0) {
            player.velocity = new Vector2(-speed, player.velocity.y);
        } else {
            player.velocity = new Vector2(0.0f, player.velocity.y);
        }
    }
}
{% endhighlight %}

What’s happening here is we grab the input and check its sign: if it’s positive (+1) then the user is hitting the right arrow key and should move right, so we change the velocity of our object to be the speed we defined and whatever vertical velocity they were already traveling at. Same idea applies for the left direction, and otherwise (`h !< 0` and `h !> 0` so `h == 0`), we make the horizontal speed 0.

Hit Play. Our player moves, but it doesn’t turn! We need to add the functionality for changing direction. We should think about how we want to do this; if the user moves right, then they should be flipped to face right, but only if they aren’t already facing right. Same idea applies for the left direction. So our code should be something like this:

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {
    // variables go here...
    // other functions go here...

    void FixedUpdate() {
        if (h > 0) {
            player.velocity = new Vector2(speed, player.velocity.y);
            if (!facingRight)
                Flip(player);
        } else if (h < 0) {
            player.velocity = new Vector2(-speed, player.velocity.y);
            if (facingRight)
                Flip(player);
        } else {
            player.velocity = new Vector2(0.0f, player.velocity.y);
        }
    }
}
{% endhighlight %}

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {
    // variables go here...
    // all other functions go here...

    void Flip(Rigidbody2D player) {
        facingRight = !facingRight;

        Vector3 scalingFactor = player.transform.localScale;
        scalingFactor.x *= -1;
        player.transform.localScale = scalingFactor;
    }
}
{% endhighlight %}

Awesome! Let’s do something even more interesting: jumping.

## Making the character jump

We need to think about how the logic of jumping works. Let's assume we only want a single jump. If the character is on the ground ("grounded"), then it should be able to jump. If the character is not on the ground, then it shouldn't be able to.

If we had some invisible object anchored right beneath our character, and any kind of object defined as "ground" was between this anchored object and our character, then the character should be defined as grounded; otherwise, it is not.

So let's do exactly that. Try adding an Empty child object to the Character. Rename this new child object to "groundCheck". Position it so that it is below the character by a bit.

Let's edit our script file to add some useful variables:

{% highlight csharp %}
// Using stuff ...
public class BirdControl : MonoBehaviour {
    // player, facingRight, h, and speed go here...

    [HideInInspector]
    public bool jump = false;
    public float jumpForce = 1000f;

    [HideInInspector]
    private bool grounded = false;
    Transform groundCheck;

    void Awake () {
        player = GetComponent<Rigidbody2D>();
        groundCheck = player.transform.Find("groundCheck");
    }

    // other functions go here...
}
{% endhighlight %}

`jump` is a boolean that will be `true` if the character is jumping, and `false` otherwise. `jumpForce` (which can be changed in the Inspector) is the amount of force that will be applied to the character vertically when the jump button is pressed.

`grounded` is a boolean that will be true if we are grounded, and false otherwise. `groundCheck` is a Transform object that represents the position of the groundCheck object we just created. Now, we will update `jump` when the user hits the Jump button (spacebar), but only if we are grounded. We also have to check if we’re actually grounded. We will check for these things in our Update function:

{% highlight csharp %}
// Using stuff...
public class BirdControl : MonoBehaviour {
    // variables go here...
    // Awake goes here...

    void Update () {
        h = Input.GetAxisRaw("Horizontal");
        grounded = Physics2D.Linecast(player.transform.position, groundCheck.position, 1 << LayerMask.NameToLayer("Ground"));

        if (Input.GetButtonDown("Jump") && grounded)
            jump = true;
    }

    // other functions go here...
}
{% endhighlight %}

The `Physics2D.Linecast` function does what we thought of before - it determines if something is between the anchored object and our character by drawing a line between them and checking for intersecting objects. The third argument with the << operator (a left bitshift) is black magic, and I'm really not sure why the operator itself is there. However, it tells the engine to look in particular for **objects with the layer "Ground"**, which is why it's good to have labels!

Then, we check to see if the "Jump" button is pressed (space by default, I believe) and if `grounded` is true. If both of these conditions are satisfied, we set `jump` to true.

And then what? Well, we need to tell the character to actually do something! Since we'll be changing the character's physical properties, let's check for jumping inside the `FixedUpdate` function:

{% highlight csharp %}
// blah blah blah ...

    void FixedUpdate() {
        // movement logic and all that goes here...

        if (jump) {
            player.AddForce(new Vector2(0, jumpForce));
            jump = false;
        }
    }
{% endhighlight %}

Using `player.AddForce()` makes the jumping look more natural, due to acceleration and decceleration, instead of changing the velocity directly. It applies a force to the object with the magnitudes in each direction that are passed to the vector constructor.

If you hit Play, then it should work out! Hopefully. If everything is right.

Anyway, that's about it for this part of the tutorial. I hope that made sense! If you find any typos or have any suggestions, feel free to submit a pull request as these posts will be on GitHub! The repo is [here](https://github.com/SaintDako/SaintDako.github.io).

{% highlight csharp %}
{% endhighlight %}

